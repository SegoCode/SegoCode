# This action clears spam notifications created by bots by marking every unread one as read.
on:
  workflow_dispatch:  

jobs:
  mark-notifications-read:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch and display notifications
        env:
          GH_TOKEN: ${{ secrets.USER_TOKEN }}
        run: |
          echo "üìã Current notifications:"
          gh api --paginate notifications --jq '.[] | {id: .id, subject: .subject.title, repository: .repository.full_name}' || echo "No notifications found"

      - name: Mark all notifications as read
        env:
          GH_TOKEN: ${{ secrets.USER_TOKEN }}
        run: |
          echo "üîÑ Marking notifications as read..."
          notification_ids=$(gh api --paginate notifications --jq '.[].id' 2>/dev/null)
          
          if [ -z "$notification_ids" ]; then
            echo "‚úÖ No notifications to mark as read"
            exit 0
          fi
          
          marked_count=0
          while IFS= read -r notification_id; do
            if [ -n "$notification_id" ]; then
              echo "Marking notification $notification_id as read..."
              gh api -X PATCH "notifications/threads/$notification_id"
              marked_count=$((marked_count + 1))
            fi
          done <<< "$notification_ids"
          
          echo "‚úÖ Successfully marked $marked_count notification(s) as read"

      - name: Check and delete notifications for non-existent repos
        env:
          GH_TOKEN: ${{ secrets.USER_TOKEN }}
        run: |
          echo "üîç Checking notifications for non-existent repositories..."
          output=$(gh api --paginate "notifications?all=true" --jq '.[] | "\(.id)\t\(.repository.full_name)"' 2>/dev/null || echo "")
          
          if [ -z "$output" ]; then
            echo "‚úÖ No notifications to check"
            exit 0
          fi
          
          deleted_count=0
          while IFS=$'\t' read -r notification_id repo_full_name; do
            if [ -n "$notification_id" ] && [ -n "$repo_full_name" ]; then
              echo "Checking repo $repo_full_name for notification $notification_id"
              if ! gh api "repos/$repo_full_name" >/dev/null 2>&1; then
                echo "‚ùå Repo $repo_full_name does not exist, deleting notification $notification_id"
                gh api -X DELETE "notifications/threads/$notification_id" || echo "Warning: Failed to delete notification $notification_id"
                deleted_count=$((deleted_count + 1))
              else
                echo "‚úÖ Repo $repo_full_name exists, keeping notification"
              fi
            fi
          done <<< "$output"
          
          echo "‚úÖ Successfully deleted $deleted_count notification(s) for non-existent repos"
